openapi: 3.0.3
info:
  title: express-auth-asset
  description: |-
    The app just shop website can buy and sell, u have seller and buyer. 
    as admin u can do any and has responsibility create dev blogs
    as super user u can see dashboard and get analitycs what was trending on this app (this one will be hard)
    as seller u can sell some product and get all access same as user.
    as buyer u only can buy and add whishlist
  termsOfService: http://swagger.io/terms/
  version: 1.0.0
servers:
  - url: http://localhost:3000/
paths:
  /user/role:
    post:
      tags:
        - User API
      summary: Create New Role
      description: Register new role
      requestBody:
        required: true
        description: Add new role
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        "200":
          description: Success register new role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
  /user/register:
    post:
      tags:
        - User API
      summary: Register new user
      description: Register new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Success register new user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
  /user/login:
    post:
      tags:
        - User API
      summary: Login user
      description: Login user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Success login user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
  /user/logout:
    post:
      tags:
        - User API
      summary: Logout user
      description: Logout user
      responses:
        "200":
          description: Success logout user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
  /product:
    get:
      tags:
        - Product API
      summary: Get all product
      description: Get all product
      responses:
        "200":
          description: Success get all product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListResponse"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
    post:
      tags:
        - Product API
      summary: Create new product
      description: Create new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Success create new product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
      security:
        - authUser: []
  /product/:id:
    get:
      tags:
        - Product API
      summary: Get product by Id
      description: Get product by Id
      parameters:
        - name: id
          in: path
          description: Product Id
          required: true
          style: simple
          explode: false
          schema:
            type: number
      responses:
        "200":
          description: Success get product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
    put:
      tags:
        - Product API
      summary: Update product by Id
      description: Update product by Id
      parameters:
        - name: id
          in: path
          description: Product Id
          required: true
          style: simple
          explode: false
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Success update product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
      security:
        - authUser: []
    delete:
      tags:
        - Product API
      summary: Delete product by Id
      description: Delete product by Id
      parameters:
        - name: id
          in: path
          description: Product Id
          required: true
          style: simple
          explode: false
          schema:
            type: number
      responses:
        "200":
          description: Success delete product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
      security:
        - authUser: []
  /productList:
    get:
      tags:
        - ProductList API
      summary: Get all product List for current user
      description: Get all product
      responses:
        "200":
          description: Success get all product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListResponse"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
      security:
        - authUser: []
    post:
      tags:
        - ProductList API
      summary: Create new product
      description: Create new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Success create new product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
      security:
        - authUser: []
  /productList/:id:
    delete:
      tags:
        - ProductList API
      summary: Delete product list by Id for current user
      description: Delete product by Id
      parameters:
        - name: id
          in: path
          description: Product Id
          required: true
          style: simple
          explode: false
          schema:
            type: number
      responses:
        "200":
          description: Success delete product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
      security:
        - authUser: []

    summary: "adding role"
    description: "adding role"

    post:
      tags:
        - "User API"
      description: "Add a role"
      parameters: []
      responses:
        "200":
          description: Adding Role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        default:
          description: Error responses code other than 200
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Default"
components:
  schemas:
    Role:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: "admin"
          minLength: 1
          maxLength: 100
      xml:
        attribute: true
        wrapped: true
    Product:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        price:
          type: number
        status:
          type: boolean
        image:
          type: string
    User:
      type: object
      properties:
        id:
          type: number
        usernames:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ProductList:
      type: object
      properties:
        id:
          type: string
        user_id:
          $ref: "#/components/schemas/User"
        product_id:
          $ref: "#/components/schemas/Product"
    Default:
      type: object
      properties:
        code:
          type: number
        status:
          type: string
        message:
          type: string
    ProductListResponse:
      type: object
      properties:
        code:
          type: number
        status:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    ProductResponse:
      type: object
      properties:
        code:
          type: number
        status:
          type: string
        data:
          $ref: "#/components/schemas/Product"

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              status:
                type: string
              message:
                type: string
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              status:
                type: string
              message:
                type: string
    NotFoundException:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              status:
                type: string
              message:
                type: string
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
              status:
                type: string
              message:
                type: string
  securitySchemes:
    authUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
